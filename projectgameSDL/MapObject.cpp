#include"MapObject.h"
#include"ObjectTextureManager.h"
#include"GameControl.h"
#include<iostream>


Map* Map::instance = 0;




//int encodeMap1_layer1[map_height][map_width] = {
//	{4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5 },
//	{4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
//	{4,4,4,4,4,4,4,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
//	{4,4,4,4,4,4,4,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
//	{4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,94,94,5,5,5,5,5,5,5,5,5},
//	{4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,113,94,5,5,5,5,5,5,5,5,5},
//	{4,4,4,4,4,4,4,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,94,94,5,5,5,5,5,5,5,5,5},
//	{4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,94,94,6,5,5,5,5,5,5,5,5},
//	{4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,94,94,6,5,5,5,5,5,5,5,5},
//	{4,4,4,4,4,4,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,94,94,6,5,5,5,5,5,5,5,5},
//	{4,4,4,4,4,4,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,113,94,6,5,5,5,5,5,5,5,5},
//	{4,4,4,4,4,4,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,94,94,6,5,5,5,5,5,6,5,5},
//	{4,4,4,4,4,4,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,5,94,94,6,5,5,5,6,6,6,6,5},
//	{4,4,4,4,4,4,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,94,94,5,5,6,6,6,6,6,6,6},
//	{4,4,4,4,4,4,6,6,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,94,94,6,6,6,6,6,6,6,6,6},
//	{4,4,4,4,4,4,6,6,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,94,94,6,6,6,6,6,6,6,6,6},
//	{4,4,4,4,4,4,4,6,6,6,6,6,6,6,6,44,65,65,65,65,65,65,65,65,65,66,65,66,65,66,65,66,65,66,65,66,65,66,65,66,65,66,65,66,65,66,65,66,42,5,5,5,5,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,94,94,6,6,6,6,6,6,6,6,6},
//	{4,4,4,4,4,4,4,6,6,6,6,6,6,6,6,48,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,45,5,5,5,5,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,94,94,5,5,5,5,5,5,5,5,5},
//	{4,4,4,4,4,4,4,6,6,6,6,6,6,6,6,48,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,45,5,5,5,5,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,5,94,94,5,5,5,5,5,5,6,6,5},
//	{4,4,4,4,4,6,6,6,6,6,6,6,6,6,6,48,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,45,5,5,5,5,129,129,129,129,129,6,6,6,6,6,6,6,6,6,5,5,94,94,5,5,5,5,5,5,5,5,5},
//	{4,4,4,4,4,4,6,6,6,6,6,6,6,6,6,25,27,28,27,28,27,28,27,28,27,28,27,28,27,28,27,28,27,28,27,28,27,28,49,49,49,49,49,49,49,49,49,49,45,5,5,5,5,129,129,129,129,129,6,6,6,6,6,6,6,5,5,5,5,94,94,5,5,5,5,5,5,5,5,5},
//	{4,4,4,4,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,4,4,4,4,4,4,4,4,4,4,4,4,48,49,49,49,49,49,49,49,49,49,45,5,5,5,5,0,0,0,0,0,6,6,6,5,5,5,5,5,5,5,5,94,94,5,5,5,5,5,5,5,5,5},
//	{4,4,4,4,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,4,4,4,4,4,4,4,4,4,4,4,4,48,49,49,49,49,49,49,49,49,49,45,5,5,5,5,0,0,0,0,0,6,6,6,5,5,5,5,5,5,5,5,94,94,5,5,5,5,5,5,5,5,5},
//	{4,4,4,4,4,4,4,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,4,4,4,4,4,4,4,4,4,4,4,4,48,49,49,49,49,49,49,49,49,49,49,65,66,42,5,0,0,0,0,0,6,6,6,5,5,5,5,5,5,5,5,94,94,5,5,5,5,5,5,5,5,5},
//	{4,4,4,4,4,4,4,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,4,4,4,4,4,4,4,4,4,4,4,4,48,49,49,49,49,49,49,49,49,49,49,49,49,45,5,0,0,0,0,0,5,6,5,6,5,5,5,5,5,5,5,113,113,5,5,5,5,5,5,5,5,5},
//	{4,4,4,4,4,4,4,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,4,4,4,4,4,4,4,4,4,4,4,4,48,49,49,49,49,49,49,49,49,49,49,49,49,45,5,0,0,0,0,0,5,5,5,5,74,75,75,75,75,75,75,75,75,75,75,75,75,76,5,5,5,5},
//	{4,4,4,4,4,4,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,4,4,4,4,4,4,4,5,4,4,4,4,25,27,27,27,27,27,27,27,27,27,27,27,28,23,5,0,0,0,0,0,5,5,5,5,93,94,94,94,94,94,94,94,94,113,113,113,113,95,5,5,5,5},
//	{4,4,4,4,5,4,4,5,5,5,68,69,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,4,4,4,4,6,4,5,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,5,5,5,5,112,113,113,113,113,113,113,113,113,113,113,113,113,114,5,5,5,5},
//	{4,4,4,6,6,6,6,6,6,0,127,128,0,0,0,0,0,0,0,5,5,5,5,5,5,5,0,0,0,0,0,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,93,94,94,94,94,94,94,94,94,94,94,94,94,95,5,5,5,5},
//	{4,4,4,0,0,0,0,0,0,0,127,128,0,0,0,0,0,0,0,5,5,74,75,76,5,5,0,0,0,0,0,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,112,94,94,94,94,94,94,94,94,94,94,94,94,114,5,5,5,5},
//	{4,4,4,0,0,0,0,0,0,0,127,128,0,0,0,0,0,0,0,5,5,93,94,95,5,5,0,0,0,0,0,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,93,94,94,94,94,94,94,94,94,94,94,94,94,95,5,5,5,5},
//	{0,0,0,0,0,0,0,0,0,0,127,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,112,113,113,113,113,113,113,113,113,113,113,113,94,114,5,5,5,5},
//	{0,0,0,0,0,0,0,0,0,0,127,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,5,5,5,5,5,93,94,94,94,94,94,94,94,94,94,94,94,94,95,5,5,5,5},
//	{0,0,0,0,0,0,0,0,0,0,127,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,5,5,5,5,5,112,94,113,113,113,113,113,113,113,113,94,94,94,114,5,5,5,5},
//	{0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,44,65,65,65,65,65,65,65,65,65,66,65,66,65,66,65,66,65,66,42,6,6,5,5,5,5,5,93,94,94,94,94,94,94,94,94,94,94,94,94,95,5,5,5,5},
//	{0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,48,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,45,6,6,5,5,5,5,5,112,94,113,113,113,94,94,94,113,113,94,94,113,114,5,5,5,5},
//	{0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,25,27,28,27,28,27,28,27,28,27,28,27,28,27,28,27,28,27,28,23,5,5,5,5,5,5,5,93,94,94,94,94,113,113,113,113,94,94,94,94,95,5,5,5,5},
//	{0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,5,5,5,5,5,112,94,113,113,113,113,113,113,113,94,94,94,94,114,5,5,5,5},
//	{0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,5,5,5,5,5,93,113,113,94,94,94,94,94,113,94,94,113,94,95,5,5,5,5},
//	{0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,5,5,5,5,5,112,113,113,113,113,113,113,113,113,113,113,113,113,114,5,5,5,5}
//};



//int encodeMap1_layer2[map_height][map_width] = {
//	{352,353,354,355,356,286,244,245,291,291,291,291,714,715,716,717,718,366,367,0,265,266,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,134,135,136,137,138,139,0,0,178,406,407,408,409 },
//	{371,372,373,374,375,286,263,264,0,0,309,0,733,734,735,736,737,385,386,0,284,285,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,153,154,155,156,157,158,0,0,178,425,426,427,428},
//	{390,391,392,393,394,286,282,283,343,344,309,0,752,753,754,755,756,0,0,0,265,266,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,172,173,174,175,176,177,0,0,178,444,445,446,447},
//	{352,353,354,355,356,286,0,0,362,363,309,0,771,772,773,774,775,0,0,0,284,285,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,191,192,193,194,195,196,0,0,178,463,464,465,466},
//	{371,372,373,374,375,286,0,0,0,0,309,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,381,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,178,0,0,0,0},
//	{390,391,392,393,394,286,12,13,14,291,291,291,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,381,0,0,0,0,0,0,381,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,178,0,0,0,0},
//	{352,353,354,355,356,286,31,32,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,179,195,195,195,195,0,0,0,0,0,195,195,178,0,0,0,0},
//	{371,372,373,374,375,286,50,51,52,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//	{390,391,392,393,394,286,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,381,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,286,305,306,305,306,305,306,307,308,307,308,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,324,325,324,325,324,325,326,327,326,327,192,192,192,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,242,243,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,261,262,0,0,0,0,104,121,121,121,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,280,281,0,0,0,0,104,105,105,105,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,105,105,105,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,105,105,105,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,244,245,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,105,105,105,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,381,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,263,264,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,282,283,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,105,105,105,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,105,105,105,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,105,105,105,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,381,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,105,105,105,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,105,105,105,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,105,105,105,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,105,105,105,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,0,0,0,0,0,0,122,0,0,122,122,122,122,122,122,99,0,0,0,0,0,0,0,104,120,120,120,99,0,0,0,0,0,0,0,0,0,118,120,120,120,120,120,120,120,120,120,120,120,120,123,105,105,105,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,104,121,121,121,121,121,123,0,0,105,105,105,105,105,105,99,0,0,0,0,0,0,0,104,105,105,105,99,0,0,0,0,0,0,0,0,0,104,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,99,0,486,487,488,481,482,483,484,485,0,0,0,0,0,0,0,0,0,0,0,0,0},
//	{0,0,0,104,105,105,105,105,105,105,0,0,105,105,105,105,105,105,99,0,0,0,0,0,0,0,104,105,105,105,99,0,0,0,0,0,0,0,0,0,104,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,99,0,505,506,507,500,501,502,503,504,0,0,0,0,0,0,0,0,0,0,0,0,0},
//	{120,120,122,123,105,105,105,105,105,105,0,0,105,105,105,105,105,105,118,121,121,105,105,105,122,122,123,105,105,105,99,0,0,0,0,0,0,0,0,0,80,82,82,82,82,82,82,82,82,82,82,82,82,83,83,83,83,83,0,524,525,526,519,520,521,522,523,0,0,0,0,0,0,0,0,0,0,0,0,0},
//	{105,105,105,105,105,105,105,105,105,105,0,0,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,543,544,545,538,539,540,541,542,0,0,0,0,0,0,0,0,0,0,0,0,0},
//	{105,105,105,105,105,105,105,82,82,82,0,0,82,82,82,82,82,105,105,105,105,105,105,105,105,105,105,105,105,105,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,231,231,368,369,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//	{105,105,105,105,105,105,99,0,0,0,0,0,0,0,0,0,0,104,105,105,105,105,105,105,105,105,105,105,105,105,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,368,369,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//	{105,105,105,105,105,105,99,0,0,0,0,0,0,0,0,0,0,104,105,105,105,105,105,105,105,105,105,105,105,105,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//	{105,105,105,105,105,105,99,0,0,0,0,0,0,0,0,0,0,104,105,105,105,105,105,105,105,105,105,105,105,105,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//	{105,105,105,105,105,105,99,0,0,0,0,0,0,0,0,0,0,104,105,105,105,105,105,105,105,105,105,105,105,105,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//	{105,105,105,105,105,105,99,0,0,0,0,0,0,0,0,0,0,104,105,105,105,105,105,105,105,105,105,105,105,105,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
//	{105,105,105,105,105,105,99,0,0,0,0,0,0,0,0,0,0,104,105,105,105,105,105,105,105,105,105,105,105,105,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
//};


std::string encodeMap1_layer1= "";
std::string encodeMap1_layer2 = "";



Map::Map() {
	ObjectTextureManager::getInstance()->loadTexture("C:/projectgameSDL/projectgameSDL/tileset map.png", "tileset", GameControl::getInstance()->getRenderer());
	int z = 1;
	for (int i = 0; i < tileset_height; i++) {
		for (int j = 0; j < tileset_width; j++) {
			mp[z] = std::make_pair(j * 32, i * 32);
			z++;
		}
	}
	std::cout << "load map\n";
}

void Map::changeMap(int idMap) {
	/*if (idMap == 1) {
		LoadMap(encodeMap1_layer1,encodeMap1_layer2);
	}
	else if (idMap == 2) {
		LoadMap(encodeMap1_layer1, encodeMap1_layer2);
	}*/

	if (idMap == 1) {
		std::ifstream fin;
		fin.open("C:/projectgameSDL/projectgameSDL/map/map1/mp_layer1.txt");
		std::string temp;
		while (fin >> temp) {
			encodeMap1_layer1 += temp;
		}
		fin.close();
		fin.open("C:/projectgameSDL/projectgameSDL/map/map1/mp_layer2.txt");
		std::string temp2;
		while (fin >> temp2) {
			encodeMap1_layer2 += temp2;
		}
		fin.close();
	}
	else if (idMap == 2) {
		std::ifstream fin;
		fin.open("C:/projectgameSDL/projectgameSDL/map/map1/mp_layer1.txt");
		std::string temp;
		while (fin >> temp) {
			encodeMap1_layer1 += temp;
		}
		fin.close();
		fin.open("C:/projectgameSDL/projectgameSDL/map/map1/mp_layer2.txt");
		std::string temp2;
		while (fin >> temp2) {
			encodeMap1_layer2 += temp2;
		}
		fin.close();
	}
	LoadMap(encodeMap1_layer1, encodeMap1_layer2);
}



void Map::LoadMap(std::string arr_layer1, std::string arr_layer2) {
	map_layer1 = stringToArray(arr_layer1);
	map_layer2 = stringToArray(arr_layer2);


	//for (int i = 0; i < map_layer1.size(); i++) {
	//	for (int j = 0; j < map_layer1[i].size(); j++) {
	//		std::cout << map_layer1[i][j] << " ";
	//	}
	//	std::cout << "\n";
	//}

	//std::cout << arr_layer2;
}


void Map::DrawMap() {
	for (int row = 0; row < map_height; row++) {
		for (int col = 0; col < map_width; col++) {
			ObjectTextureManager::getInstance()->drawTile("tileset", col * tileSize, row * tileSize, mp[map_layer1 [row] [col] ].first, mp[map_layer1[row][col]].second, 32, 32, GameControl::getInstance()->getRenderer());
		}
	}

	for (int row = 0; row < map_height; row++) {
		for (int col = 0; col < map_width; col++) {
			ObjectTextureManager::getInstance()->drawTile("tileset", col * tileSize, row * tileSize, mp[map_layer2[row][col]].first, mp[map_layer2[row][col]].second, 32, 32, GameControl::getInstance()->getRenderer());
		}
	}
}

bool Map::MapCollision(GameObject*player) {
	int x = player->getPos().getX() / tileSize+1;
	int y = player->getPos().getY() / tileSize+1;
	std::cout << x << " " << y << std::endl;
	if (x <=0 || y <=0||x>=map_width||y>=map_height) {
		return true;
	}
	else if (map_layer2[y][x] != 0) {
		return true;
	}
	return false;
}



std::vector<std::vector<int>> Map::stringToArray(std::string s) {
	for (int i = 0; i < s.size(); i++) {
		if(s[i]==','){
			s[i] = ' ';
		}
	}
	std::stringstream ss(s);
	std::string hehe;
	std::vector<std::string>word;
	while (ss >> hehe) {
		word.push_back(hehe);
	}

	std::vector<std::vector<int>>v;
	int l = 0;
	for (int i = 0; i <map_height; i++) {
		std::vector<int>loi;
		for (int j = 1; j <= map_width; j++) {
			loi.push_back(stoi(word[l]));
			l++;
		}
		v.push_back(loi);
	} 
	return v;
}